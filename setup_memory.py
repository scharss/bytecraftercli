#!/usr/bin/env python3
"""
Script para configurar el sistema de memoria persistente de Bytecrafter CLI
"""

import os
import sys
from pathlib import Path

def create_env_file():
    """Crea archivo .env con configuraci√≥n de memoria"""
    env_content = """# Configuraci√≥n de Bytecrafter CLI

# API Key de Google Gemini (REQUERIDO)
GEMINI_API_KEY=your_gemini_api_key_here

# Configuraci√≥n de Memoria Persistente
ENABLE_MEMORY=true

# Base de datos (descomenta UNA de las opciones):

# Opci√≥n 1: SQLite (m√°s simple, recomendado para desarrollo)
DATABASE_URL=sqlite:///./bytecrafter_memory.db

# Opci√≥n 2: PostgreSQL (recomendado para producci√≥n)
# DATABASE_URL=postgresql://username:password@localhost:5432/bytecrafter_memory

# Configuraci√≥n de retenci√≥n de datos
MEMORY_RETENTION_DAYS=90

# Modelo por defecto
DEFAULT_MODEL=gemini-1.5-flash
"""
    
    env_path = Path(".env")
    
    if env_path.exists():
        print("‚ö†Ô∏è  Archivo .env ya existe")
        overwrite = input("¬øDeseas sobrescribirlo? (y/N): ").lower().strip()
        if overwrite != 'y':
            print("‚úÖ Manteniendo archivo .env existente")
            return
    
    try:
        with open(env_path, 'w', encoding='utf-8') as f:
            f.write(env_content)
        print("‚úÖ Archivo .env creado exitosamente")
        print("üìù Por favor edita el archivo .env y configura tu GEMINI_API_KEY")
    except Exception as e:
        print(f"‚ùå Error creando archivo .env: {e}")

def check_dependencies():
    """Verifica que las dependencias est√©n instaladas"""
    try:
        import sqlalchemy
        print("‚úÖ SQLAlchemy instalado")
    except ImportError:
        print("‚ùå SQLAlchemy no instalado")
        return False
    
    try:
        import alembic
        print("‚úÖ Alembic instalado")
    except ImportError:
        print("‚ùå Alembic no instalado")
        return False
    
    # Opcional: PostgreSQL
    try:
        import psycopg2
        print("‚úÖ psycopg2 instalado (PostgreSQL disponible)")
    except ImportError:
        print("‚ö†Ô∏è  psycopg2 no instalado (solo SQLite disponible)")
    
    return True

def test_database_connection():
    """Prueba la conexi√≥n a la base de datos"""
    try:
        # Cargar variables de entorno
        if Path(".env").exists():
            from dotenv import load_dotenv
            load_dotenv()
        
        from src.bytecrafter.memory.database import init_database, test_connection
        
        print("üîß Inicializando base de datos...")
        if init_database():
            print("‚úÖ Base de datos inicializada correctamente")
            
            if test_connection():
                print("‚úÖ Conexi√≥n a base de datos exitosa")
                return True
            else:
                print("‚ùå Error en conexi√≥n a base de datos")
                return False
        else:
            print("‚ùå Error inicializando base de datos")
            return False
            
    except Exception as e:
        print(f"‚ùå Error probando base de datos: {e}")
        return False

def main():
    """Funci√≥n principal"""
    print("üß† Configuraci√≥n del Sistema de Memoria Persistente")
    print("=" * 50)
    
    # 1. Verificar dependencias
    print("\n1. Verificando dependencias...")
    if not check_dependencies():
        print("‚ùå Instala las dependencias faltantes: pip install -r requirements.txt")
        return False
    
    # 2. Crear archivo .env
    print("\n2. Configurando archivo de entorno...")
    create_env_file()
    
    # 3. Probar base de datos
    print("\n3. Probando conexi√≥n a base de datos...")
    if test_database_connection():
        print("\n‚úÖ ¬°Sistema de memoria configurado exitosamente!")
        print("\nüìö Ahora Bytecrafter recordar√°:")
        print("   ‚Ä¢ Conversaciones anteriores")
        print("   ‚Ä¢ Contexto de proyectos")
        print("   ‚Ä¢ Patrones de uso y aprendizajes")
        print("   ‚Ä¢ Soluciones a problemas recurrentes")
        print("\nüöÄ Ejecuta: python -m src.bytecrafter.main")
        return True
    else:
        print("\n‚ùå Error en configuraci√≥n de memoria")
        print("üí° Verifica:")
        print("   ‚Ä¢ Que el archivo .env tenga configuraci√≥n correcta")
        print("   ‚Ä¢ Que PostgreSQL est√© ejecut√°ndose (si usas PostgreSQL)")
        print("   ‚Ä¢ Que los permisos de escritura est√©n disponibles (si usas SQLite)")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 